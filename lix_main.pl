/*Automatically generated do not change*/
/*Run make_ann(lix.pl.ann,lix_main.pl) to generate */
(:-op(1150,fx,type)).
:- dynamic
        memo_table/2.
:- dynamic
        flag/2.
(:-use_module(library(terms))).
print_memo_table :-
        memo_table(A, B),
        portray_clause(memo_table(A,B)),
        fail.
print_memo_table.
lix_load(A, B, C) :-
        print('%loading file '),
        print(A),
        nl,
        lix(B, C).
lix(A, B) :-
        retractall(memo_table(_,_)),
        print('/*Generated by Lix*/\n'),
        print(':- dynamic flag/2, memo_table/2.\n'),
        print(':- use_module(library(lists)).\n'),
        print(':- use_module(library(terms)).\n'),
        print(':- op(1150, fx, type).\n'),
        memo(A, B).
memo(A, B) :-
        (   memo_table(A, B) ->
            true
        ;   generalise_and_filter(A, C, D),
            assert(memo_table(C,D)),
            findall((D:-E), unfold(C,E), F),
            format('/*~k=~k*/~n', [D,C]),
            pretty_print_clauses(F),
            memo_table(A, B)
        ).
unfold(A, B) :-
        ann_clause(_, A, C),
        body(C, B).
body(true, true).
body((A,B), (C,D)) :-
        body(A, C),
        body(B, D).
body(logen(call,A), true) :-
        call(A).
body(logen(rescall,A), A).
body(logen(memo,A), B) :-
        memo(A, B).
body(logen(unfold,A), B) :-
        unfold(A, B).
body(resif(A,B,C), (D->E;F)) :-
        body(A, D),
        body(B, E),
        body(C, F).
body(if(A,B,C), D) :-
        (   body(A, _) ->
            body(B, E),
            E=D
        ;   body(C, F),
            F=D
        ).
body(resfindall(A,B,C), findall(A,D,C)) :-
        body(B, D).
body(hide_nf(A), B) :-
        term_variables(A, C),
        findall((D,C), body(A,D), E),
        (   E=[] ->
            B=fail
        ;   make_disj(E, C, F),
            flatten(F, B)
        ).
make_disj([(A,B)], C, D) :-
        simplify_eq(B, C, E),
        D=(E,A).
make_disj([(A,B)|C], D, (E;F)) :-
        make_disj(C, D, F),
        simplify_eq(B, D, G),
        E=(G,A).
simplify_eq(A, B, fail) :-
        A\=B.
simplify_eq(A, B, true) :-
        A==B.
simplify_eq(A, B, A=B) :-
        var(A), !.
simplify_eq(A, B, A=B) :-
        var(B), !.
simplify_eq(A, B, C) :-
        nonvar(A),
        nonvar(B),
        functor(A, D, E),
        functor(B, D, E),
        A=..[D|F],
        B=..[D|G],
        simplify_eqL(F, G, C).
simplify_eqL([A], [B], C) :-
        simplify_eq(A, B, C).
simplify_eqL([A|B], [C|D], (E,F)) :-
        simplify_eq(A, C, E),
        simplify_eqL(B, D, F).
generalise_and_filter(A, B, C) :-
        functor(A, D, E),
        functor(B, D, E),
        filter(A, F),
        A=..[G|H],
        gen_filter(F, H, I, J),
        B=..[G|I],
        gensym(G, K),
        C=..[K|J].
typedef(list(A), (struct([],[]);struct('.',[A,(type list(A))]))).
gen_filter([], [], [], []).
gen_filter([(A;_)|B], C, D, E) :-
        gen_filter([A|B], C, D, E).
gen_filter([(_;A)|B], C, D, E) :-
        gen_filter([A|B], C, D, E).
gen_filter([static|A], [B|C], [B|D], E) :-
        gen_filter(A, C, D, E).
gen_filter([dynamic|A], [_|B], [C|D], [C|E]) :-
        gen_filter(A, B, D, E).
gen_filter([nonvar|A], [B|C], [D|E], F) :-
        B=..[G|H],
        length(H, I),
        length(J, I),
        D=..[G|J],
        gen_filter(A, C, E, K),
        append(J, K, F).
gen_filter([(type A)|B], C, D, E) :-
        typedef(A, F),
        gen_filter([F|B], C, D, E).
gen_filter([struct(A,B)|C], [D|E], [F|G], H) :-
        D=..[A|I],
        gen_filter(B, I, J, K),
        F=..[A|J],
        gen_filter(C, E, G, L),
        append(K, L, H).
pretty_print_clauses([]).
pretty_print_clauses([A|B]) :-
        flatten(A, C),
        portray_clause(C),
        pretty_print_clauses(B).
flatten((A:-B), (A:-C)) :- !,
        flatten(B, C).
flatten((A,B), C) :- !,
        flatten(A, D),
        flatten(B, E),
        (   D=true ->
            C=E
        ;   E=true ->
            C=D
        ;   C=(D,E)
        ).
flatten((A;B), C) :- !,
        flatten(A, D),
        flatten(B, E),
        (   D=true ->
            C=E
        ;   E=true ->
            C=D
        ;   C=(D;E)
        ).
flatten((A->B;C), (D->E;F)) :- !,
        flatten(A, D),
        flatten(B, E),
        flatten(C, F).
flatten(A, A).
gensym(A, B) :-
        var(B),
        atom(A),
        oldvalue(A, C),
        D is C+1,
        set_flag(gensym(A), D),
        name(E, [95,95]),
        string_concat(A, E, F),
        string_concat(F, D, B).
oldvalue(A, B) :-
        flag(gensym(A), B), !.
oldvalue(_, 0).
set_flag(A, B) :-
        nonvar(A),
        retract(flag(A,_)), !,
        asserta(flag(A,B)).
set_flag(A, B) :-
        nonvar(A),
        asserta(flag(A,B)).
append([], A, A).
append([A|B], C, [A|D]) :-
        append(B, C, D).
string_concat(A, B, C) :-
        name(A, D),
        (   var(B) ->
            name(B, E)
        ;   name(B, E)
        ),
        append(D, E, F),
        (   var(B) ->
            name(C, F)
        ;   name(C, F)
        ).
filter(app(_,_,_), [dynamic,static,dynamic]).
ann_clause(1, app([],A,A), true).
ann_clause(2, app([A|B],C,[A|D]), logen(memo,app(B,C,D))).
filter(test(_), [dynamic]).
ann_clause(5, test(A), hide_nf(logen(unfold,p(A)))).
ann_clause(3, p(a), true).
ann_clause(4, p(b), true).
ann_clause(0, l_eval([],_,[]), true).
ann_clause(1, l_eval([A|B],C,[D|E]), (logen(unfold,eval(A,C,D)),logen(unfold,l_eval(B,C,E)))).
ann_clause(2, eval(cst(A),_,constr(A,[])), true).
ann_clause(3, eval(constr(A,B),C,constr(A,D)), logen(unfold,l_eval(B,C,D))).
ann_clause(4, eval(var(A),B,C), logen(unfold,lookup(A,B,C))).
ann_clause(5, eval(plus(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E+F))).
ann_clause(6, eval(minus(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E-F))).
ann_clause(7, eval(times(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E*F))).
ann_clause(8, eval(eq(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,E)),logen(unfold,eval(B,C,F)),resif(logen(rescall,E=F),logen(rescall,D=true),logen(rescall,D=false)))).
ann_clause(9, eval(let(A,B,C),D,E), (logen(unfold,eval(B,D,F)),logen(unfold,store(D,A,F,G)),logen(unfold,eval(C,G,E)))).
ann_clause(10, eval(if(A,B,C),D,E), logen(unfold,eval_if(A,B,C,D,E))).
ann_clause(11, eval(if2(A,B,C),D,E), (logen(unfold,eval(A,D,F)),resif(logen(rescall,F=constr(true,[])),hide_nf(logen(unfold,eval(B,D,E))),hide_nf(logen(unfold,eval(C,D,E)))))).
ann_clause(12, eval(lambda(A,B),_,lambda(A,B)), true).
ann_clause(13, eval(apply(A,B),C,D), (logen(unfold,eval(B,C,E)),logen(unfold,rename(E,C,lambda(F,G))),logen(unfold,eval(A,C,H)),logen(unfold,store(C,F,H,I)),logen(memo,eval(G,I,D)))).
ann_clause(14, eval(fun(A),_,B), logen(unfold,function(A,B))).
ann_clause(15, eval(print(A),_,constr(true,[])), (logen(rescall,print(A)),logen(rescall,nl))).
ann_clause(16, eval_if(A,B,_,C,D), (logen(unfold,test(A,C)),logen(rescall,!),logen(unfold,eval(B,C,D)))).
ann_clause(17, eval_if(_,_,A,B,C), logen(unfold,eval(A,B,C))).
ann_clause(18, test(eq(A,B),C), (logen(unfold,eval(A,C,D)),logen(unfold,eval(B,C,D)))).
ann_clause(19, rename(A,_,B), logen(call,B=A)).
ann_clause(20, function(fib,lambda(x,if(eq(var(x),cst(0)),cst(1),if(eq(var(x),cst(1)),cst(1),plus(apply(minus(var(x),cst(1)),fun(fib)),apply(minus(var(x),cst(2)),fun(fib))))))), true).
ann_clause(21, store([],A,B,[A/B]), true).
ann_clause(22, store([A/_|B],A,C,[A/C|B]), true).
ann_clause(23, store([A/B|C],D,E,[A/B|F]), (logen(call,D\==A),logen(unfold,store(C,D,E,F)))).
ann_clause(24, lookup(A,[A/B|_],B), true).
ann_clause(25, lookup(A,[B/_|C],D), (logen(rescall,A\==B),logen(unfold,lookup(A,C,D)))).
ann_clause(26, fib(A,B), (logen(unfold,store([],x,A,C)),logen(unfold,eval(apply(cst(A),fun(fib)),C,constr(B,_))))).
ann_clause(27, bench(A,B), (logen(rescall,A>B),logen(rescall,print('Done')),logen(rescall,nl))).
ann_clause(28, bench(A,B), (logen(rescall,A=<B),logen(unfold,fib(A,C)),logen(rescall,!),logen(rescall,print(fib(A))),logen(rescall,print(' == ')),logen(rescall,print(C)),logen(rescall,nl),logen(rescall,D is A+1),logen(memo,bench(D,B)))).
filter(l_eval(_,_,_), [static,(type list(struct(/,[static,dynamic]))),dynamic]).
filter(eval(_,_,_), [static,(type list(struct(/,[static,dynamic]))),dynamic]).
filter(rename(_,_,_), [dynamic,dynamic,dynamic]).
filter(function(_,_), [dynamic,dynamic]).
filter(store(_,_,_,_), [dynamic,static,static,dynamic]).
filter(lookup(_,_,_), [struct(static,[]),dynamic,dynamic]).
filter(fib(_,_), [dynamic,dynamic]).
filter(bench(_,_), [dynamic,dynamic]).
filter(bench2(_,_), [dynamic,dynamic]).
filter(eval_if(_,_,_,_,_), [static,static,static,(type list(struct(/,[static,dynamic]))),dynamic]).
ann_clause(0, print_memo_table, (logen(rescall,memo_table(A,B)),logen(rescall,portray_clause(memo_table(A,B))),logen(rescall,fail))).
ann_clause(ac, ann_clause(ac,print_memo_table,(logen(rescall,memo_table(A,B)),logen(rescall,portray_clause(memo_table(A,B))),logen(rescall,fail))), true).
ann_clause(1, print_memo_table, true).
ann_clause(ac, ann_clause(ac,print_memo_table,true), true).
ann_clause(2, lix_load(A,B,C), (logen(rescall,print('%loading file ')),logen(rescall,print(A)),logen(rescall,nl),logen(unfold,lix(B,C)))).
ann_clause(ac, ann_clause(ac,lix_load(A,B,C),(logen(rescall,print('%loading file ')),logen(rescall,print(A)),logen(rescall,nl),logen(unfold,lix(B,C)))), true).
ann_clause(3, lix(A,B), (logen(rescall,retractall(memo_table(_,_))),logen(rescall,print('/*Generated by Lix*/\n')),logen(rescall,print(':- dynamic flag/2, memo_table/2.\n')),logen(rescall,print(':- use_module(library(lists)).\n')),logen(rescall,print(':- use_module(library(terms)).\n')),logen(rescall,print(':- op(1150, fx, type).\n')),logen(memo,memo(A,B)))).
ann_clause(ac, ann_clause(ac,lix(A,B),(logen(rescall,retractall(memo_table(_,_))),logen(rescall,print('/*Generated by Lix*/\n')),logen(rescall,print(':- dynamic flag/2, memo_table/2.\n')),logen(rescall,print(':- use_module(library(lists)).\n')),logen(rescall,print(':- use_module(library(terms)).\n')),logen(rescall,print(':- op(1150, fx, type).\n')),logen(memo,memo(A,B)))), true).
ann_clause(4, memo(A,B), resif(logen(rescall,memo_table(A,B)),logen(rescall,true),(logen(unfold,generalise_and_filter(A,C,D)),logen(rescall,assert(memo_table(C,D))),resfindall((D:-E),logen(memo,unfold(C,E)),F),logen(rescall,format('/*~k=~k*/~n',[D,C])),logen(memo,pretty_print_clauses(F)),logen(rescall,memo_table(A,B))))).
ann_clause(ac, ann_clause(ac,memo(A,B),resif(logen(rescall,memo_table(A,B)),logen(rescall,true),(logen(unfold,generalise_and_filter(A,C,D)),logen(rescall,assert(memo_table(C,D))),resfindall((D:-E),logen(memo,unfold(C,E)),F),logen(rescall,format('/*~k=~k*/~n',[D,C])),logen(memo,pretty_print_clauses(F)),logen(rescall,memo_table(A,B))))), true).
ann_clause(5, unfold(A,B), (logen(unfold,ann_clause(_,A,C)),logen(unfold,body(C,B)))).
ann_clause(ac, ann_clause(ac,unfold(A,B),(logen(unfold,ann_clause(_,A,C)),logen(unfold,body(C,B)))), true).
ann_clause(6, body(true,true), true).
ann_clause(ac, ann_clause(ac,body(true,true),true), true).
ann_clause(7, body((A,B),(C,D)), (logen(unfold,body(A,C)),logen(unfold,body(B,D)))).
ann_clause(ac, ann_clause(ac,body((A,B),(C,D)),(logen(unfold,body(A,C)),logen(unfold,body(B,D)))), true).
ann_clause(8, body(logen(call,A),true), logen(rescall,call(A))).
ann_clause(ac, ann_clause(ac,body(logen(call,A),true),logen(rescall,call(A))), true).
ann_clause(9, body(logen(rescall,A),A), true).
ann_clause(ac, ann_clause(ac,body(logen(rescall,A),A),true), true).
ann_clause(10, body(logen(memo,A),B), logen(memo,memo(A,B))).
ann_clause(ac, ann_clause(ac,body(logen(memo,A),B),logen(memo,memo(A,B))), true).
ann_clause(11, body(logen(unfold,A),B), logen(memo,unfold(A,B))).
ann_clause(ac, ann_clause(ac,body(logen(unfold,A),B),logen(memo,unfold(A,B))), true).
ann_clause(12, body(resif(A,B,C),(D->E;F)), (logen(unfold,body(A,D)),logen(unfold,body(B,E)),logen(unfold,body(C,F)))).
ann_clause(ac, ann_clause(ac,body(resif(A,B,C),(D->E;F)),(logen(unfold,body(A,D)),logen(unfold,body(B,E)),logen(unfold,body(C,F)))), true).
ann_clause(13, body(if(A,B,C),D), resif(logen(unfold,body(A,_)),(logen(unfold,body(B,E)),logen(rescall,E=D)),(logen(unfold,body(C,F)),logen(rescall,F=D)))).
ann_clause(ac, ann_clause(ac,body(if(A,B,C),D),resif(logen(unfold,body(A,_)),(logen(unfold,body(B,E)),logen(rescall,E=D)),(logen(unfold,body(C,F)),logen(rescall,F=D)))), true).
ann_clause(14, body(resfindall(A,B,C),findall(A,D,C)), logen(unfold,body(B,D))).
ann_clause(ac, ann_clause(ac,body(resfindall(A,B,C),findall(A,D,C)),logen(unfold,body(B,D))), true).
ann_clause(15, body(hide_nf(A),B), (logen(rescall,term_variables(A,C)),resfindall((D,C),logen(unfold,body(A,D)),E),resif(logen(rescall,E=[]),logen(rescall,B=fail),(logen(memo,make_disj(E,C,F)),logen(memo,flatten(F,B)))))).
ann_clause(ac, ann_clause(ac,body(hide_nf(A),B),(logen(rescall,term_variables(A,C)),resfindall((D,C),logen(unfold,body(A,D)),E),resif(logen(rescall,E=[]),logen(rescall,B=fail),(logen(memo,make_disj(E,C,F)),logen(memo,flatten(F,B)))))), true).
ann_clause(16, make_disj([(A,B)],C,D), (logen(memo,simplify_eq(B,C,E)),logen(rescall,D=(E,A)))).
ann_clause(ac, ann_clause(ac,make_disj([(A,B)],C,D),(logen(memo,simplify_eq(B,C,E)),logen(rescall,D=(E,A)))), true).
ann_clause(17, make_disj([(A,B)|C],D,(E;F)), (logen(memo,make_disj(C,D,F)),logen(memo,simplify_eq(B,D,G)),logen(rescall,E=(G,A)))).
ann_clause(ac, ann_clause(ac,make_disj([(A,B)|C],D,(E;F)),(logen(memo,make_disj(C,D,F)),logen(memo,simplify_eq(B,D,G)),logen(rescall,E=(G,A)))), true).
ann_clause(18, simplify_eq(A,B,fail), logen(rescall,A\=B)).
ann_clause(ac, ann_clause(ac,simplify_eq(A,B,fail),logen(rescall,A\=B)), true).
ann_clause(19, simplify_eq(A,B,true), logen(rescall,A==B)).
ann_clause(ac, ann_clause(ac,simplify_eq(A,B,true),logen(rescall,A==B)), true).
ann_clause(20, simplify_eq(A,B,A=B), (logen(rescall,var(A)),logen(rescall,!))).
ann_clause(ac, ann_clause(ac,simplify_eq(A,B,A=B),(logen(rescall,var(A)),logen(rescall,!))), true).
ann_clause(21, simplify_eq(A,B,A=B), (logen(rescall,var(B)),logen(rescall,!))).
ann_clause(ac, ann_clause(ac,simplify_eq(A,B,A=B),(logen(rescall,var(B)),logen(rescall,!))), true).
ann_clause(22, simplify_eq(A,B,C), (logen(rescall,nonvar(A)),logen(rescall,nonvar(B)),logen(rescall,functor(A,D,E)),logen(rescall,functor(B,D,E)),logen(rescall,A=..[D|F]),logen(rescall,B=..[D|G]),logen(memo,simplify_eqL(F,G,C)))).
ann_clause(ac, ann_clause(ac,simplify_eq(A,B,C),(logen(rescall,nonvar(A)),logen(rescall,nonvar(B)),logen(rescall,functor(A,D,E)),logen(rescall,functor(B,D,E)),logen(rescall,A=..[D|F]),logen(rescall,B=..[D|G]),logen(memo,simplify_eqL(F,G,C)))), true).
ann_clause(23, simplify_eqL([A],[B],C), logen(memo,simplify_eq(A,B,C))).
ann_clause(ac, ann_clause(ac,simplify_eqL([A],[B],C),logen(memo,simplify_eq(A,B,C))), true).
ann_clause(24, simplify_eqL([A|B],[C|D],(E,F)), (logen(memo,simplify_eq(A,C,E)),logen(memo,simplify_eqL(B,D,F)))).
ann_clause(ac, ann_clause(ac,simplify_eqL([A|B],[C|D],(E,F)),(logen(memo,simplify_eq(A,C,E)),logen(memo,simplify_eqL(B,D,F)))), true).
ann_clause(25, generalise_and_filter(A,B,C), (logen(call,functor(A,D,E)),logen(call,functor(B,D,E)),logen(unfold,filter(A,F)),logen(call,A=..[G|H]),logen(unfold,gen_filter(F,H,I,J)),logen(call,B=..[G|I]),logen(memo,gensym(G,K)),logen(rescall,C=..[K|J]))).
ann_clause(ac, ann_clause(ac,generalise_and_filter(A,B,C),(logen(call,functor(A,D,E)),logen(call,functor(B,D,E)),logen(unfold,filter(A,F)),logen(call,A=..[G|H]),logen(unfold,gen_filter(F,H,I,J)),logen(call,B=..[G|I]),logen(memo,gensym(G,K)),logen(rescall,C=..[K|J]))), true).
ann_clause(26, typedef(list(A),(struct([],[]);struct('.',[A,(type list(A))]))), true).
ann_clause(ac, ann_clause(ac,typedef(list(A),(struct([],[]);struct('.',[A,(type list(A))]))),true), true).
ann_clause(27, gen_filter([],[],[],[]), true).
ann_clause(ac, ann_clause(ac,gen_filter([],[],[],[]),true), true).
ann_clause(28, gen_filter([(A;_)|B],C,D,E), logen(unfold,gen_filter([A|B],C,D,E))).
ann_clause(ac, ann_clause(ac,gen_filter([(A;_)|B],C,D,E),logen(unfold,gen_filter([A|B],C,D,E))), true).
ann_clause(29, gen_filter([(_;A)|B],C,D,E), logen(unfold,gen_filter([A|B],C,D,E))).
ann_clause(ac, ann_clause(ac,gen_filter([(_;A)|B],C,D,E),logen(unfold,gen_filter([A|B],C,D,E))), true).
ann_clause(30, gen_filter([static|A],[B|C],[B|D],E), logen(unfold,gen_filter(A,C,D,E))).
ann_clause(ac, ann_clause(ac,gen_filter([static|A],[B|C],[B|D],E),logen(unfold,gen_filter(A,C,D,E))), true).
ann_clause(31, gen_filter([dynamic|A],[_|B],[C|D],[C|E]), logen(unfold,gen_filter(A,B,D,E))).
ann_clause(ac, ann_clause(ac,gen_filter([dynamic|A],[_|B],[C|D],[C|E]),logen(unfold,gen_filter(A,B,D,E))), true).
ann_clause(32, gen_filter([nonvar|A],[B|C],[D|E],F), (logen(rescall,B=..[G|H]),logen(rescall,length(H,I)),logen(rescall,length(J,I)),logen(rescall,D=..[G|J]),logen(unfold,gen_filter(A,C,E,K)),logen(rescall,append(J,K,F)))).
ann_clause(ac, ann_clause(ac,gen_filter([nonvar|A],[B|C],[D|E],F),(logen(rescall,B=..[G|H]),logen(rescall,length(H,I)),logen(rescall,length(J,I)),logen(rescall,D=..[G|J]),logen(unfold,gen_filter(A,C,E,K)),logen(rescall,append(J,K,F)))), true).
ann_clause(33, gen_filter([(type A)|B],C,D,E), (logen(unfold,typedef(A,F)),logen(memo,gen_filter([F|B],C,D,E)))).
ann_clause(ac, ann_clause(ac,gen_filter([(type A)|B],C,D,E),(logen(unfold,typedef(A,F)),logen(memo,gen_filter([F|B],C,D,E)))), true).
ann_clause(34, gen_filter([struct(A,B)|C],[D|E],[F|G],H), (logen(rescall,D=..[A|I]),logen(unfold,gen_filter(B,I,J,K)),logen(rescall,F=..[A|J]),logen(unfold,gen_filter(C,E,G,L)),logen(rescall,append(K,L,H)))).
ann_clause(ac, ann_clause(ac,gen_filter([struct(A,B)|C],[D|E],[F|G],H),(logen(rescall,D=..[A|I]),logen(unfold,gen_filter(B,I,J,K)),logen(rescall,F=..[A|J]),logen(unfold,gen_filter(C,E,G,L)),logen(rescall,append(K,L,H)))), true).
ann_clause(35, pretty_print_clauses([]), true).
ann_clause(ac, ann_clause(ac,pretty_print_clauses([]),true), true).
ann_clause(36, pretty_print_clauses([A|B]), (logen(memo,flatten(A,C)),logen(rescall,portray_clause(C)),logen(memo,pretty_print_clauses(B)))).
ann_clause(ac, ann_clause(ac,pretty_print_clauses([A|B]),(logen(memo,flatten(A,C)),logen(rescall,portray_clause(C)),logen(memo,pretty_print_clauses(B)))), true).
ann_clause(37, flatten((A:-B),(A:-C)), (logen(rescall,!),logen(memo,flatten(B,C)))).
ann_clause(ac, ann_clause(ac,flatten((A:-B),(A:-C)),(logen(rescall,!),logen(memo,flatten(B,C)))), true).
ann_clause(38, flatten((A,B),C), (logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),resif(logen(rescall,D=true),logen(rescall,C=E),resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D,E)))))).
ann_clause(ac, ann_clause(ac,flatten((A,B),C),(logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),resif(logen(rescall,D=true),logen(rescall,C=E),resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D,E)))))), true).
ann_clause(39, flatten((A;B),C), (logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),resif(logen(rescall,D=true),logen(rescall,C=E),resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D;E)))))).
ann_clause(ac, ann_clause(ac,flatten((A;B),C),(logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),resif(logen(rescall,D=true),logen(rescall,C=E),resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D;E)))))), true).
ann_clause(40, flatten((A->B;C),(D->E;F)), (logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),logen(memo,flatten(C,F)))).
ann_clause(ac, ann_clause(ac,flatten((A->B;C),(D->E;F)),(logen(rescall,!),logen(memo,flatten(A,D)),logen(memo,flatten(B,E)),logen(memo,flatten(C,F)))), true).
ann_clause(41, flatten(A,A), true).
ann_clause(ac, ann_clause(ac,flatten(A,A),true), true).
ann_clause(42, gensym(A,B), (logen(rescall,var(B)),logen(call,atom(A)),logen(memo,oldvalue(A,C)),logen(rescall,D is C+1),logen(memo,set_flag(gensym(A),D)),logen(call,name(E,[95,95])),logen(unfold,string_concat(A,E,F)),logen(unfold,string_concat(F,D,B)))).
ann_clause(ac, ann_clause(ac,gensym(A,B),(logen(rescall,var(B)),logen(call,atom(A)),logen(memo,oldvalue(A,C)),logen(rescall,D is C+1),logen(memo,set_flag(gensym(A),D)),logen(call,name(E,[95,95])),logen(unfold,string_concat(A,E,F)),logen(unfold,string_concat(F,D,B)))), true).
ann_clause(43, oldvalue(A,B), (logen(rescall,flag(gensym(A),B)),logen(rescall,!))).
ann_clause(ac, ann_clause(ac,oldvalue(A,B),(logen(rescall,flag(gensym(A),B)),logen(rescall,!))), true).
ann_clause(44, oldvalue(_,0), true).
ann_clause(ac, ann_clause(ac,oldvalue(_,0),true), true).
ann_clause(45, set_flag(A,B), (logen(call,nonvar(A)),logen(rescall,retract(flag(A,_))),logen(rescall,!),logen(rescall,asserta(flag(A,B))))).
ann_clause(ac, ann_clause(ac,set_flag(A,B),(logen(call,nonvar(A)),logen(rescall,retract(flag(A,_))),logen(rescall,!),logen(rescall,asserta(flag(A,B))))), true).
ann_clause(46, set_flag(A,B), (logen(call,nonvar(A)),logen(rescall,asserta(flag(A,B))))).
ann_clause(ac, ann_clause(ac,set_flag(A,B),(logen(call,nonvar(A)),logen(rescall,asserta(flag(A,B))))), true).
ann_clause(47, append([],A,A), true).
ann_clause(ac, ann_clause(ac,append([],A,A),true), true).
ann_clause(48, append([A|B],C,[A|D]), logen(unfold,append(B,C,D))).
ann_clause(ac, ann_clause(ac,append([A|B],C,[A|D]),logen(unfold,append(B,C,D))), true).
ann_clause(49, string_concat(A,B,C), (logen(call,name(A,D)),if(logen(call,var(B)),logen(rescall,name(B,E)),logen(call,name(B,E))),logen(unfold,append(D,E,F)),if(logen(call,var(B)),logen(rescall,name(C,F)),logen(call,name(C,F))))).
ann_clause(ac, ann_clause(ac,string_concat(A,B,C),(logen(call,name(A,D)),if(logen(call,var(B)),logen(rescall,name(B,E)),logen(call,name(B,E))),logen(unfold,append(D,E,F)),if(logen(call,var(B)),logen(rescall,name(C,F)),logen(call,name(C,F))))), true).
ann_clause(50, filter(app(_,_,_),[dynamic,static,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(app(_,_,_),[dynamic,static,dynamic]),true), true).
ann_clause(51, ann_clause(1,app([],A,A),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(1,app([],A,A),true),true), true).
ann_clause(52, ann_clause(2,app([A|B],C,[A|D]),logen(memo,app(B,C,D))), true).
ann_clause(ac, ann_clause(ac,ann_clause(2,app([A|B],C,[A|D]),logen(memo,app(B,C,D))),true), true).
ann_clause(53, filter(test(_),[dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(test(_),[dynamic]),true), true).
ann_clause(54, ann_clause(5,test(A),hide_nf(logen(unfold,p(A)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(5,test(A),hide_nf(logen(unfold,p(A)))),true), true).
ann_clause(55, ann_clause(3,p(a),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(3,p(a),true),true), true).
ann_clause(56, ann_clause(4,p(b),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(4,p(b),true),true), true).
ann_clause(57, ann_clause(0,l_eval([],_,[]),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(0,l_eval([],_,[]),true),true), true).
ann_clause(58, ann_clause(1,l_eval([A|B],C,[D|E]),(logen(unfold,eval(A,C,D)),logen(unfold,l_eval(B,C,E)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(1,l_eval([A|B],C,[D|E]),(logen(unfold,eval(A,C,D)),logen(unfold,l_eval(B,C,E)))),true), true).
ann_clause(59, ann_clause(2,eval(cst(A),_,constr(A,[])),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(2,eval(cst(A),_,constr(A,[])),true),true), true).
ann_clause(60, ann_clause(3,eval(constr(A,B),C,constr(A,D)),logen(unfold,l_eval(B,C,D))), true).
ann_clause(ac, ann_clause(ac,ann_clause(3,eval(constr(A,B),C,constr(A,D)),logen(unfold,l_eval(B,C,D))),true), true).
ann_clause(61, ann_clause(4,eval(var(A),B,C),logen(unfold,lookup(A,B,C))), true).
ann_clause(ac, ann_clause(ac,ann_clause(4,eval(var(A),B,C),logen(unfold,lookup(A,B,C))),true), true).
ann_clause(62, ann_clause(5,eval(plus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E+F))), true).
ann_clause(ac, ann_clause(ac,ann_clause(5,eval(plus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E+F))),true), true).
ann_clause(63, ann_clause(6,eval(minus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E-F))), true).
ann_clause(ac, ann_clause(ac,ann_clause(6,eval(minus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E-F))),true), true).
ann_clause(64, ann_clause(7,eval(times(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E*F))), true).
ann_clause(ac, ann_clause(ac,ann_clause(7,eval(times(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E*F))),true), true).
ann_clause(65, ann_clause(8,eval(eq(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,E)),logen(unfold,eval(B,C,F)),resif(logen(rescall,E=F),logen(rescall,D=true),logen(rescall,D=false)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(8,eval(eq(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,E)),logen(unfold,eval(B,C,F)),resif(logen(rescall,E=F),logen(rescall,D=true),logen(rescall,D=false)))),true), true).
ann_clause(66, ann_clause(9,eval(let(A,B,C),D,E),(logen(unfold,eval(B,D,F)),logen(unfold,store(D,A,F,G)),logen(unfold,eval(C,G,E)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(9,eval(let(A,B,C),D,E),(logen(unfold,eval(B,D,F)),logen(unfold,store(D,A,F,G)),logen(unfold,eval(C,G,E)))),true), true).
ann_clause(67, ann_clause(10,eval(if(A,B,C),D,E),logen(unfold,eval_if(A,B,C,D,E))), true).
ann_clause(ac, ann_clause(ac,ann_clause(10,eval(if(A,B,C),D,E),logen(unfold,eval_if(A,B,C,D,E))),true), true).
ann_clause(68, ann_clause(11,eval(if2(A,B,C),D,E),(logen(unfold,eval(A,D,F)),resif(logen(rescall,F=constr(true,[])),hide_nf(logen(unfold,eval(B,D,E))),hide_nf(logen(unfold,eval(C,D,E)))))), true).
ann_clause(ac, ann_clause(ac,ann_clause(11,eval(if2(A,B,C),D,E),(logen(unfold,eval(A,D,F)),resif(logen(rescall,F=constr(true,[])),hide_nf(logen(unfold,eval(B,D,E))),hide_nf(logen(unfold,eval(C,D,E)))))),true), true).
ann_clause(69, ann_clause(12,eval(lambda(A,B),_,lambda(A,B)),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(12,eval(lambda(A,B),_,lambda(A,B)),true),true), true).
ann_clause(70, ann_clause(13,eval(apply(A,B),C,D),(logen(unfold,eval(B,C,E)),logen(unfold,rename(E,C,lambda(F,G))),logen(unfold,eval(A,C,H)),logen(unfold,store(C,F,H,I)),logen(memo,eval(G,I,D)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(13,eval(apply(A,B),C,D),(logen(unfold,eval(B,C,E)),logen(unfold,rename(E,C,lambda(F,G))),logen(unfold,eval(A,C,H)),logen(unfold,store(C,F,H,I)),logen(memo,eval(G,I,D)))),true), true).
ann_clause(71, ann_clause(14,eval(fun(A),_,B),logen(unfold,function(A,B))), true).
ann_clause(ac, ann_clause(ac,ann_clause(14,eval(fun(A),_,B),logen(unfold,function(A,B))),true), true).
ann_clause(72, ann_clause(15,eval(print(A),_,constr(true,[])),(logen(rescall,print(A)),logen(rescall,nl))), true).
ann_clause(ac, ann_clause(ac,ann_clause(15,eval(print(A),_,constr(true,[])),(logen(rescall,print(A)),logen(rescall,nl))),true), true).
ann_clause(73, ann_clause(16,eval_if(A,B,_,C,D),(logen(unfold,test(A,C)),logen(rescall,!),logen(unfold,eval(B,C,D)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(16,eval_if(A,B,_,C,D),(logen(unfold,test(A,C)),logen(rescall,!),logen(unfold,eval(B,C,D)))),true), true).
ann_clause(74, ann_clause(17,eval_if(_,_,A,B,C),logen(unfold,eval(A,B,C))), true).
ann_clause(ac, ann_clause(ac,ann_clause(17,eval_if(_,_,A,B,C),logen(unfold,eval(A,B,C))),true), true).
ann_clause(75, ann_clause(18,test(eq(A,B),C),(logen(unfold,eval(A,C,D)),logen(unfold,eval(B,C,D)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(18,test(eq(A,B),C),(logen(unfold,eval(A,C,D)),logen(unfold,eval(B,C,D)))),true), true).
ann_clause(76, ann_clause(19,rename(A,_,B),logen(call,B=A)), true).
ann_clause(ac, ann_clause(ac,ann_clause(19,rename(A,_,B),logen(call,B=A)),true), true).
ann_clause(77, ann_clause(20,function(fib,lambda(x,if(eq(var(x),cst(0)),cst(1),if(eq(var(x),cst(1)),cst(1),plus(apply(minus(var(x),cst(1)),fun(fib)),apply(minus(var(x),cst(2)),fun(fib))))))),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(20,function(fib,lambda(x,if(eq(var(x),cst(0)),cst(1),if(eq(var(x),cst(1)),cst(1),plus(apply(minus(var(x),cst(1)),fun(fib)),apply(minus(var(x),cst(2)),fun(fib))))))),true),true), true).
ann_clause(78, ann_clause(21,store([],A,B,[A/B]),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(21,store([],A,B,[A/B]),true),true), true).
ann_clause(79, ann_clause(22,store([A/_|B],A,C,[A/C|B]),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(22,store([A/_|B],A,C,[A/C|B]),true),true), true).
ann_clause(80, ann_clause(23,store([A/B|C],D,E,[A/B|F]),(logen(call,D\==A),logen(unfold,store(C,D,E,F)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(23,store([A/B|C],D,E,[A/B|F]),(logen(call,D\==A),logen(unfold,store(C,D,E,F)))),true), true).
ann_clause(81, ann_clause(24,lookup(A,[A/B|_],B),true), true).
ann_clause(ac, ann_clause(ac,ann_clause(24,lookup(A,[A/B|_],B),true),true), true).
ann_clause(82, ann_clause(25,lookup(A,[B/_|C],D),(logen(rescall,A\==B),logen(unfold,lookup(A,C,D)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(25,lookup(A,[B/_|C],D),(logen(rescall,A\==B),logen(unfold,lookup(A,C,D)))),true), true).
ann_clause(83, ann_clause(26,fib(A,B),(logen(unfold,store([],x,A,C)),logen(unfold,eval(apply(cst(A),fun(fib)),C,constr(B,_))))), true).
ann_clause(ac, ann_clause(ac,ann_clause(26,fib(A,B),(logen(unfold,store([],x,A,C)),logen(unfold,eval(apply(cst(A),fun(fib)),C,constr(B,_))))),true), true).
ann_clause(84, ann_clause(27,bench(A,B),(logen(rescall,A>B),logen(rescall,print('Done')),logen(rescall,nl))), true).
ann_clause(ac, ann_clause(ac,ann_clause(27,bench(A,B),(logen(rescall,A>B),logen(rescall,print('Done')),logen(rescall,nl))),true), true).
ann_clause(85, ann_clause(28,bench(A,B),(logen(rescall,A=<B),logen(unfold,fib(A,C)),logen(rescall,!),logen(rescall,print(fib(A))),logen(rescall,print(' == ')),logen(rescall,print(C)),logen(rescall,nl),logen(rescall,D is A+1),logen(memo,bench(D,B)))), true).
ann_clause(ac, ann_clause(ac,ann_clause(28,bench(A,B),(logen(rescall,A=<B),logen(unfold,fib(A,C)),logen(rescall,!),logen(rescall,print(fib(A))),logen(rescall,print(' == ')),logen(rescall,print(C)),logen(rescall,nl),logen(rescall,D is A+1),logen(memo,bench(D,B)))),true), true).
ann_clause(86, filter(l_eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(l_eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic]),true), true).
ann_clause(87, filter(eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic]),true), true).
ann_clause(88, filter(rename(_,_,_),[dynamic,dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(rename(_,_,_),[dynamic,dynamic,dynamic]),true), true).
ann_clause(89, filter(function(_,_),[dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(function(_,_),[dynamic,dynamic]),true), true).
ann_clause(90, filter(store(_,_,_,_),[dynamic,static,static,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(store(_,_,_,_),[dynamic,static,static,dynamic]),true), true).
ann_clause(91, filter(lookup(_,_,_),[struct(static,[]),dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(lookup(_,_,_),[struct(static,[]),dynamic,dynamic]),true), true).
ann_clause(92, filter(fib(_,_),[dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(fib(_,_),[dynamic,dynamic]),true), true).
ann_clause(93, filter(bench(_,_),[dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(bench(_,_),[dynamic,dynamic]),true), true).
ann_clause(94, filter(bench2(_,_),[dynamic,dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(bench2(_,_),[dynamic,dynamic]),true), true).
ann_clause(95, filter(eval_if(_,_,_,_,_),[static,static,static,(type list(struct(/,[static,dynamic]))),dynamic]), true).
ann_clause(ac, ann_clause(ac,filter(eval_if(_,_,_,_,_),[static,static,static,(type list(struct(/,[static,dynamic]))),dynamic]),true), true).
filter(lix_load(_,_,_), [static,nonvar,dynamic]).
ann_clause(filter, filter(lix_load(_,_,_),[static,nonvar,dynamic]), true).
filter(lix(_,_), [nonvar,dynamic]).
ann_clause(filter, filter(lix(_,_),[nonvar,dynamic]), true).
filter(memo(_,_), [nonvar,dynamic]).
ann_clause(filter, filter(memo(_,_),[nonvar,dynamic]), true).
filter(unfold(_,_), [nonvar,dynamic]).
ann_clause(filter, filter(unfold(_,_),[nonvar,dynamic]), true).
filter(generalise_and_filter(_,_,_), [nonvar,dynamic,dynamic]).
ann_clause(filter, filter(generalise_and_filter(_,_,_),[nonvar,dynamic,dynamic]), true).
filter(pretty_print_clauses(_), [dynamic]).
ann_clause(filter, filter(pretty_print_clauses(_),[dynamic]), true).
filter(flatten(_,_), [dynamic,dynamic]).
ann_clause(filter, filter(flatten(_,_),[dynamic,dynamic]), true).
filter(gensym(_,_), [static,dynamic]).
ann_clause(filter, filter(gensym(_,_),[static,dynamic]), true).
filter(oldvalue(_,_), [dynamic,dynamic]).
ann_clause(filter, filter(oldvalue(_,_),[dynamic,dynamic]), true).
filter(set_flag(_,_), [nonvar,dynamic]).
ann_clause(filter, filter(set_flag(_,_),[nonvar,dynamic]), true).
filter(make_disj(_,_,_), [dynamic,dynamic,dynamic]).
ann_clause(filter, filter(make_disj(_,_,_),[dynamic,dynamic,dynamic]), true).
filter(simplify_eq(_,_,_), [dynamic,dynamic,dynamic]).
ann_clause(filter, filter(simplify_eq(_,_,_),[dynamic,dynamic,dynamic]), true).
filter(simplify_eqL(_,_,_), [dynamic,dynamic,dynamic]).
ann_clause(filter, filter(simplify_eqL(_,_,_),[dynamic,dynamic,dynamic]), true).
filter(gen_filter(_,_,_,_), [static,dynamic,dynamic,dynamic]).
ann_clause(filter, filter(gen_filter(_,_,_,_),[static,dynamic,dynamic,dynamic]), true).
