/*Automatically generated do not change*/
/*Run make_ann(self_pe.pl,self_ann.pl) to generate */

:- op(1150, fx, type).

:- dynamic
        memo_table/2.
:- dynamic
        flag/2.
:- use_module(library(terms)).
%:- use_module(library(lists)).

%:- dynamic ann_clause/2.

%(:-use_module(debug)).

print_memo_table :-
	memo_table(A,B),
	portray_clause(memo_table(A,B)),
	fail.

print_memo_table.


lix_load(Filename, Call, Res) :-
	print('%loading file '), print(Filename), nl,
	lix(Call,Res).


%flag(bta,0).
lix(A, B) :-
	retractall(memo_table(_,_)),
        print('/*Generated by Lix*/\n'),
        print(':- dynamic flag/2, memo_table/2.\n'),
	print(':- use_module(library(lists)).\n'),
	print(':- use_module(library(terms)).\n'),
	print(':- op(1150, fx, type).\n'),
	print(':- dynamic filter/2.\n'),
	print(':- dynamic ann_clause/3. \n'),
        memo(A, B).

memo(A, B) :-
 	(   memo_table(A, B) ->
            true
        ;   generalise_and_filter(A, C, D),
            assert(memo_table(C,D)),
            findall((D:-E), unfold(C,E), F),
            format('/*~k=~k*/~n', [D,C]),
            pretty_print_clauses(F),
            memo_table(A, B)
        ).
unfold(ann_clause(ID, A, B), true) :-
	!,
	ann_clause(ID,A,B).
unfold(filter(A,B), true) :-
	!,
	filter(A,B).

unfold(A, B) :-
        ann_clause(_, A, C),
        body(C, B).
body(true, true).
body((A,B), (C,D)) :-
        body(A, C),
        body(B, D).
body(logen(call,A), true) :-
        call(A).
body(logen(rescall,A), A).
body(logen(memo,A), B) :-
        memo(A, B).
body(logen(unfold,A), B) :-
        unfold(A, B).
body(resif(A,B,C), (D->E;F)) :-
        body(A, D),
        body(B, E),
        body(C, F).
body(if(A,B,C), D) :-
        (   body(A, _) ->
            body(B, E),
            E=D
        ;   body(C, F),
            F=D
        ).
body(resfindall(A,B,C), findall(A,D,C)) :-
        body(B, D).


body(hide_nf(A), FlatB) :-
	term_variables(A,AL),
	findall((R,AL), body(A,R), Bag),
	(Bag=[] ->
	    FlatB=fail
	;
	    (
	      make_disj(Bag,AL,B),
	      flatten(B,FlatB)
	    )
	).


%make_disj([],_,fail).
make_disj([(R,AL)],Vars,Code) :-
	simplify_eq(AL,Vars,Eq),
	Code = (Eq,R).
make_disj([(R,AL)|T],Vars,(Code;Disj)) :-
	make_disj(T,Vars,Disj),
	simplify_eq(AL,Vars,Eq),
	Code = (Eq,R).

simplify_eq(A,B,fail) :-
	A\=B.
simplify_eq(A,B,true) :-
	A==B.
simplify_eq(A,B,A=B) :-
	var(A), !.
simplify_eq(A,B,A=B) :-
	var(B), !.
simplify_eq(A,B,EqCode) :-
	nonvar(A),
	nonvar(B),
	functor(A,F,Arity),
	functor(B,F,Arity),
	A =.. [F|AArgs],
	B =.. [F|BArgs],
	simplify_eqL(AArgs,BArgs,EqCode).

%simplify_eqL([],[],true).
simplify_eqL([A],[B],EqCode) :-
	simplify_eq(A,B,EqCode).
simplify_eqL([A|As],[B|Bs],(EqA,EqAs)):-
	simplify_eq(A,B,EqA),
	simplify_eqL(As,Bs,EqAs).




        

generalise_and_filter(A, B, C) :-
	functor(A,Func,Arity),
	functor(B,Func,Arity),
        filter(A, D),
        A=..[E|F],
        gen_filter(D, F, G, H),
        B=..[E|G],

	   gensym(E, I),
            C=..[I|H]

	.

typedef(list(T),(struct([],[]) ; struct('.',[T,type(list(T))]))).

gen_filter([], [], [], []).
gen_filter([(Type1;_Type2)|Ts], A, G, F) :-
	gen_filter([Type1|Ts],A, G, F).
gen_filter([(_Type1;Type2)|Ts], A, G, F) :-
	gen_filter([Type2|Ts],A, G, F).

	   
gen_filter([static|A], [B|C], [B|D], E) :-
%        (   flag(bta, true) ->
%            ground(B)
%        ;   true
%        ),
        gen_filter(A, C, D, E).
gen_filter([dynamic|A], [_|B], [C|D], [C|E]) :-
        gen_filter(A, B, D, E).
gen_filter([nonvar|A], [B|C], [D|E], F) :-
        B=..[G|H],
        length(H, I),
        length(J, I),
        D=..[G|J],
        gen_filter(A, C, E, K),
        append(J, K, F).
gen_filter([type(Type)|Fs], A,G,F):-
	typedef(Type, TypeDef),
	gen_filter([TypeDef|Fs],A,G,F).

%gen_filter([type(Type)|Fs], A,G,F):-
%	typedef(Type, TypeDef),
%	gen_filter([TypeDef],A1,G1,F1),
%	gen_filter(Fs,A2,G2,F2),
%	append(A1,A2,A),
%	append(G1,G2,G),
%	append(F1,F2,F).


gen_filter([struct(F,SubFilter)|Fs], [Arg|Rest], [Gen|Gens],Fils) :-
	Arg =.. [F|SubArgs],
	gen_filter(SubFilter,SubArgs,SGen,SFil),	
	Gen =.. [F| SGen],	
	gen_filter(Fs,Rest,Gens,FilRest),
	append(SFil,FilRest,Fils).




pretty_print_clauses([]).
pretty_print_clauses([A|B]) :-
        flatten(A, C),
        portray_clause(C),	
        pretty_print_clauses(B).

flatten((A:-B), (A:-C)) :- !,
        flatten(B, C).
flatten((A,B), C) :- !,
        flatten(A, D),
        flatten(B, E),
        (   D=true ->
            C=E
        ;   E=true ->
            C=D
        ;   C=(D,E)
        ).
flatten((A;B), C) :- !,
        flatten(A, D),
        flatten(B, E),
        (   D=true ->
            C=E
        ;   E=true ->
            C=D
        ;   C=(D;E)
        ).
flatten((A->B;C), (D->E;F)) :- !,
        flatten(A, D),
        flatten(B, E),
        flatten(C, F).
flatten(A, A).
gensym(A, B) :-
        var(B),
        atom(A),
        oldvalue(A, C),
        D is C+1,
        set_flag(gensym(A), D),
        name(E, [95,95]),
        string_concat(A, E, F),
        string_concat(F, D, B).
oldvalue(A, B) :-
        flag(gensym(A), B), !.
oldvalue(_, 0).
set_flag(A, B) :-
        nonvar(A),
        retract(flag(A,_)), !,
        asserta(flag(A,B)).
set_flag(A, B) :-
        nonvar(A),
        asserta(flag(A,B)).
append([], A, A).
append([A|B], C, [A|D]) :-
        append(B, C, D).
string_concat(A, B, C) :-
        name(A, D),
        (   var(B) ->
            name(B, E)
        ;   name(B, E)
        ),
        append(D, E, F),
        (   var(B) ->
            name(C, F)
        ;   name(C, F)
        ).

%app([],A,A).
%app([A|B],C,[A|D]) :- app(B,C,D).

filter(app(_,_,_), [dynamic,static,dynamic]).
ann_clause(1, app([],A,A), true).
ann_clause(2, app([A|B],C,[A|D]), logen(memo,app(B,C,D))).

filter(test(_),[dynamic]).
ann_clause(5,test(X), hide_nf(logen(unfold,p(X)))).
ann_clause(3, p(a), true).
ann_clause(4, p(b), true).


ann_clause(0, l_eval([],_,[]), true).
ann_clause(1, l_eval([A|B],C,[D|E]), (logen(unfold,eval(A,C,D)),logen(unfold,l_eval(B,C,E)))).
ann_clause(2, eval(cst(A),_,constr(A,[])), true).
ann_clause(3, eval(constr(A,B),C,constr(A,D)), logen(unfold,l_eval(B,C,D))).
ann_clause(4, eval(var(A),B,C), logen(unfold,lookup(A,B,C))).
ann_clause(5, eval(plus(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E+F))).
ann_clause(6, eval(minus(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E-F))).
ann_clause(7, eval(times(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E*F))).
ann_clause(8, eval(eq(A,B),C,constr(D,[])), (logen(unfold,eval(A,C,E)),logen(unfold,eval(B,C,F)),resif(logen(rescall,E=F),logen(rescall,D=true),logen(rescall,D=false)))).
ann_clause(9, eval(let(A,B,C),D,E), (logen(unfold,eval(B,D,F)),logen(unfold,store(D,A,F,G)),logen(unfold,eval(C,G,E)))).
ann_clause(10, eval(if(A,B,C),D,E), logen(unfold,eval_if(A,B,C,D,E))).
ann_clause(11, eval(if2(A,B,C),D,E), (logen(unfold,eval(A,D,F)),resif(logen(rescall,F=constr(true,[])),hide_nf(logen(unfold,eval(B,D,E))),hide_nf(logen(unfold,eval(C,D,E)))))).
ann_clause(12, eval(lambda(A,B),_,lambda(A,B)), true).
ann_clause(13, eval(apply(A,B),C,D), (logen(unfold,eval(B,C,E)),logen(unfold,rename(E,C,lambda(F,G))),logen(unfold,eval(A,C,H)),logen(unfold,store(C,F,H,I)),logen(memo,eval(G,I,D)))).
ann_clause(14, eval(fun(A),_,B), logen(unfold,function(A,B))).
ann_clause(15, eval(print(A),_,constr(true,[])), (logen(rescall,print(A)),logen(rescall,nl))).
ann_clause(16, eval_if(A,B,_,C,D), (logen(unfold,test(A,C)),logen(rescall,!),logen(unfold,eval(B,C,D)))).
ann_clause(17, eval_if(_,_,A,B,C), logen(unfold,eval(A,B,C))).
ann_clause(18, test(eq(A,B),C), (logen(unfold,eval(A,C,D)),logen(unfold,eval(B,C,D)))).
ann_clause(19, rename(A,_,B), logen(call,B=A)).
ann_clause(20, function(fib,lambda(x,if(eq(var(x),cst(0)),cst(1),if(eq(var(x),cst(1)),cst(1),plus(apply(minus(var(x),cst(1)),fun(fib)),apply(minus(var(x),cst(2)),fun(fib))))))), true).
ann_clause(21, store([],A,B,[A/B]), true).
ann_clause(22, store([A/_|B],A,C,[A/C|B]), true).
ann_clause(23, store([A/B|C],D,E,[A/B|F]), (logen(call,D\==A),logen(unfold,store(C,D,E,F)))).
ann_clause(24, lookup(A,[A/B|_],B), true).
ann_clause(25, lookup(A,[B/_|C],D), (logen(rescall,A\==B),logen(unfold,lookup(A,C,D)))).
ann_clause(26, fib(A,B), (logen(unfold,store([],x,A,C)),logen(unfold,eval(apply(cst(A),fun(fib)),C,constr(B,_))))).
ann_clause(27, bench(A,B), (logen(rescall,A>B),logen(rescall,print('Done')),logen(rescall,nl))).
ann_clause(28, bench(A,B), (logen(rescall,A=<B),logen(unfold,fib(A,C)),logen(rescall,!),logen(rescall,print(fib(A))),logen(rescall,print(' == ')),logen(rescall,print(C)),logen(rescall,nl),logen(rescall,D is A+1),logen(memo,bench(D,B)))).
filter(l_eval(_,_,_), [static,(type list(struct(/,[static,dynamic]))),dynamic]).
filter(eval(_,_,_), [static,(type list(struct(/,[static,dynamic]))),dynamic]).
filter(rename(_,_,_), [dynamic,dynamic,dynamic]).
filter(function(_,_), [dynamic,dynamic]).
filter(store(_,_,_,_), [dynamic,static,static,dynamic]).
filter(lookup(_,_,_), [struct(static,[]),dynamic,dynamic]).
filter(fib(_,_), [dynamic,dynamic]).
filter(bench(_,_), [dynamic,dynamic]).
filter(bench2(_,_), [dynamic,dynamic]).
filter(eval_if(_,_,_,_,_), [static,static,static,(type list(struct(/,[static,dynamic]))),dynamic]).













