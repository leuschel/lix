(:-module(lix,[])).
(:-op(1150,fx,type)).
:- dynamic
        memo_table/2.
:- dynamic
        flag/2.
(:-use_module(library(terms))).
logen(print_memo_table, print_memo_table) :-
        logen(rescall, memo_table(A,B)),
        logen(rescall, portray_clause(memo_table(A,B))),
        logen(rescall, fail).
logen(print_memo_table, print_memo_table).
logen(lix_load, lix_load(A,B,C)) :-
        logen(rescall, print('%loading file ')),
        logen(rescall, print(A)),
        logen(rescall, nl),
        logen(unfold, lix(B,C)).
logen(lix, lix(A,B)) :-
        logen(rescall, retractall(memo_table(_,_))),
        logen(rescall, print('/*Generated by Lix*/\n')),
        logen(rescall, print(':- dynamic flag/2, memo_table/2.\n')),
        logen(rescall, print(':- use_module(library(lists)).\n')),
        logen(rescall, print(':- use_module(library(terms)).\n')),
        logen(rescall, print(':- op(1150, fx, type).\n')),
        logen(rescall, print(':- dynamic filter/2.\n')),
        logen(rescall, print(':- dynamic ann_clause/3. \n')),
        logen(memo, memo(A,B)).
logen(memo, memo(A,B)) :-
        resif(logen(rescall,memo_table(A,B)), logen(rescall,true), (logen(unfold,generalise_and_filter(A,C,D)),logen(rescall,assert(memo_table(C,D))),resfindall((D:-E),logen(memo,unfold(C,E)),F),logen(rescall,format('/*~k=~k*/~n',[D,C])),logen(memo,pretty_print_clauses(F)),logen(rescall,memo_table(A,B)))).
logen(unfold, unfold(ann_clause(A,B,C),true)) :-
        logen(call, !),
        logen(rescall, ann_clause(A,B,C)).
logen(unfold, unfold(filter(A,B),true)) :-
        logen(call, !),
        logen(rescall, filter(A,B)).
logen(unfold, unfold(A,B)) :-
        logen(unfold, ann_clause(_,A,C)),
        logen(unfold, body(C,B)).
logen(body, body(true,true)).
logen(body, body((A,B),(C,D))) :-
        logen(unfold, body(A,C)),
        logen(unfold, body(B,D)).
logen(body, body(logen(call,A),true)) :-
        logen(rescall, call(A)).
logen(body, body(logen(rescall,A),A)).
logen(body, body(logen(memo,A),B)) :-
        logen(memo, memo(A,B)).
logen(body, body(logen(unfold,A),B)) :-
        logen(memo, unfold(A,B)).
logen(body, body(resif(A,B,C),(D->E;F))) :-
        logen(unfold, body(A,D)),
        logen(unfold, body(B,E)),
        logen(unfold, body(C,F)).
logen(body, body(if(A,B,C),D)) :-
        resif(logen(unfold,body(A,_)), (logen(unfold,body(B,E)),logen(rescall,E=D)), (logen(unfold,body(C,F)),logen(rescall,F=D))).
logen(body, body(resfindall(A,B,C),findall(A,D,C))) :-
        logen(unfold, body(B,D)).
logen(body, body(hide_nf(A),B)) :-
        logen(rescall, term_variables(A,C)),
        resfindall((D,C), logen(unfold,body(A,D)), E),
        resif(logen(rescall,E=[]), logen(rescall,B=fail), (logen(memo,make_disj(E,C,F)),logen(memo,flatten(F,B)))).
logen(make_disj, make_disj([(A,B)],C,D)) :-
        logen(memo, simplify_eq(B,C,E)),
        logen(rescall, D=(E,A)).
logen(make_disj, make_disj([(A,B)|C],D,(E;F))) :-
        logen(memo, make_disj(C,D,F)),
        logen(memo, simplify_eq(B,D,G)),
        logen(rescall, E=(G,A)).
logen(simplify_eq, simplify_eq(A,B,fail)) :-
        logen(rescall, A\=B).
logen(simplify_eq, simplify_eq(A,B,true)) :-
        logen(rescall, A==B).
logen(simplify_eq, simplify_eq(A,B,A=B)) :-
        logen(rescall, var(A)),
        logen(rescall, !).
logen(simplify_eq, simplify_eq(A,B,A=B)) :-
        logen(rescall, var(B)),
        logen(rescall, !).
logen(simplify_eq, simplify_eq(A,B,C)) :-
        logen(rescall, nonvar(A)),
        logen(rescall, nonvar(B)),
        logen(rescall, functor(A,D,E)),
        logen(rescall, functor(B,D,E)),
        logen(rescall, A=..[D|F]),
        logen(rescall, B=..[D|G]),
        logen(memo, simplify_eqL(F,G,C)).
logen(simplify_eqL, simplify_eqL([A],[B],C)) :-
        logen(memo, simplify_eq(A,B,C)).
logen(simplify_eqL, simplify_eqL([A|B],[C|D],(E,F))) :-
        logen(memo, simplify_eq(A,C,E)),
        logen(memo, simplify_eqL(B,D,F)).
logen(generalise_and_filter, generalise_and_filter(A,B,C)) :-
        logen(call, functor(A,D,E)),
        logen(call, functor(B,D,E)),
        logen(unfold, filter(A,F)),
        logen(call, A=..[G|H]),
        logen(unfold, gen_filter(F,H,I,J)),
        logen(call, B=..[G|I]),
        logen(memo, gensym(G,K)),
        logen(rescall, C=..[K|J]).
logen(typedef, typedef(list(A),(struct([],[]);struct('.',[A,(type list(A))])))).
logen(gen_filter, gen_filter([],[],[],[])).
logen(gen_filter, gen_filter([(A;_)|B],C,D,E)) :-
        logen(unfold, gen_filter([A|B],C,D,E)).
logen(gen_filter, gen_filter([(_;A)|B],C,D,E)) :-
        logen(unfold, gen_filter([A|B],C,D,E)).
logen(gen_filter, gen_filter([static|A],[B|C],[B|D],E)) :-
        logen(unfold, gen_filter(A,C,D,E)).
logen(gen_filter, gen_filter([dynamic|A],[_|B],[C|D],[C|E])) :-
        logen(unfold, gen_filter(A,B,D,E)).
logen(gen_filter, gen_filter([nonvar|A],[B|C],[D|E],F)) :-
        logen(rescall, B=..[G|H]),
        logen(rescall, length(H,I)),
        logen(rescall, length(J,I)),
        logen(rescall, D=..[G|J]),
        logen(unfold, gen_filter(A,C,E,K)),
        logen(rescall, append(J,K,F)).
logen(gen_filter, gen_filter([(type A)|B],C,D,E)) :-
        logen(unfold, typedef(A,F)),
        logen(memo, gen_filter([F|B],C,D,E)).
logen(gen_filter, gen_filter([struct(A,B)|C],[D|E],[F|G],H)) :-
        logen(rescall, D=..[A|I]),
        logen(unfold, gen_filter(B,I,J,K)),
        logen(rescall, F=..[A|J]),
        logen(unfold, gen_filter(C,E,G,L)),
        logen(rescall, append(K,L,H)).
logen(pretty_print_clauses, pretty_print_clauses([])).
logen(pretty_print_clauses, pretty_print_clauses([A|B])) :-
        logen(memo, flatten(A,C)),
        logen(rescall, portray_clause(C)),
        logen(memo, pretty_print_clauses(B)).
logen(flatten, flatten((A:-B),(A:-C))) :-
        logen(rescall, !),
        logen(memo, flatten(B,C)).
logen(flatten, flatten((A,B),C)) :-
        logen(rescall, !),
        logen(memo, flatten(A,D)),
        logen(memo, flatten(B,E)),
        resif(logen(rescall,D=true), logen(rescall,C=E), resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D,E)))).
logen(flatten, flatten((A;B),C)) :-
        logen(rescall, !),
        logen(memo, flatten(A,D)),
        logen(memo, flatten(B,E)),
        resif(logen(rescall,D=true), logen(rescall,C=E), resif(logen(rescall,E=true),logen(rescall,C=D),logen(rescall,C=(D;E)))).
logen(flatten, flatten((A->B;C),(D->E;F))) :-
        logen(rescall, !),
        logen(memo, flatten(A,D)),
        logen(memo, flatten(B,E)),
        logen(memo, flatten(C,F)).
logen(flatten, flatten(A,A)).
logen(gensym, gensym(A,B)) :-
        logen(rescall, var(B)),
        logen(call, atom(A)),
        logen(memo, oldvalue(A,C)),
        logen(rescall, D is C+1),
        logen(memo, set_flag(gensym(A),D)),
        logen(call, name(E,[95,95])),
        logen(unfold, string_concat(A,E,F)),
        logen(unfold, string_concat(F,D,B)).
logen(oldvalue, oldvalue(A,B)) :-
        logen(rescall, flag(gensym(A),B)),
        logen(rescall, !).
logen(oldvalue, oldvalue(_,0)).
logen(set_flag, set_flag(A,B)) :-
        logen(call, nonvar(A)),
        logen(rescall, retract(flag(A,_))),
        logen(rescall, !),
        logen(rescall, asserta(flag(A,B))).
logen(set_flag, set_flag(A,B)) :-
        logen(call, nonvar(A)),
        logen(rescall, asserta(flag(A,B))).
logen(append, append([],A,A)).
logen(append, append([A|B],C,[A|D])) :-
        logen(unfold, append(B,C,D)).
logen(string_concat, string_concat(A,B,C)) :-
        logen(call, name(A,D)),
        if(logen(call,var(B)), logen(rescall,name(B,E)), logen(call,name(B,E))),
        logen(unfold, append(D,E,F)),
        if(logen(call,var(B)), logen(rescall,name(C,F)), logen(call,name(C,F))).
logen(filter, filter(app(_,_,_),[dynamic,static,dynamic])).
logen(ann_clause, ann_clause(1,app([],A,A),true)).
logen(ann_clause, ann_clause(2,app([A|B],C,[A|D]),logen(memo,app(B,C,D)))).
logen(filter, filter(test(_),[dynamic])).
logen(ann_clause, ann_clause(5,test(A),hide_nf(logen(unfold,p(A))))).
logen(ann_clause, ann_clause(3,p(a),true)).
logen(ann_clause, ann_clause(4,p(b),true)).
logen(ann_clause, ann_clause(0,l_eval([],_,[]),true)).
logen(ann_clause, ann_clause(1,l_eval([A|B],C,[D|E]),(logen(unfold,eval(A,C,D)),logen(unfold,l_eval(B,C,E))))).
logen(ann_clause, ann_clause(2,eval(cst(A),_,constr(A,[])),true)).
logen(ann_clause, ann_clause(3,eval(constr(A,B),C,constr(A,D)),logen(unfold,l_eval(B,C,D)))).
logen(ann_clause, ann_clause(4,eval(var(A),B,C),logen(unfold,lookup(A,B,C)))).
logen(ann_clause, ann_clause(5,eval(plus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E+F)))).
logen(ann_clause, ann_clause(6,eval(minus(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E-F)))).
logen(ann_clause, ann_clause(7,eval(times(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,constr(E,[]))),logen(unfold,eval(B,C,constr(F,[]))),logen(rescall,D is E*F)))).
logen(ann_clause, ann_clause(8,eval(eq(A,B),C,constr(D,[])),(logen(unfold,eval(A,C,E)),logen(unfold,eval(B,C,F)),resif(logen(rescall,E=F),logen(rescall,D=true),logen(rescall,D=false))))).
logen(ann_clause, ann_clause(9,eval(let(A,B,C),D,E),(logen(unfold,eval(B,D,F)),logen(unfold,store(D,A,F,G)),logen(unfold,eval(C,G,E))))).
logen(ann_clause, ann_clause(10,eval(if(A,B,C),D,E),logen(unfold,eval_if(A,B,C,D,E)))).
logen(ann_clause, ann_clause(11,eval(if2(A,B,C),D,E),(logen(unfold,eval(A,D,F)),resif(logen(rescall,F=constr(true,[])),hide_nf(logen(unfold,eval(B,D,E))),hide_nf(logen(unfold,eval(C,D,E))))))).
logen(ann_clause, ann_clause(12,eval(lambda(A,B),_,lambda(A,B)),true)).
logen(ann_clause, ann_clause(13,eval(apply(A,B),C,D),(logen(unfold,eval(B,C,E)),logen(unfold,rename(E,C,lambda(F,G))),logen(unfold,eval(A,C,H)),logen(unfold,store(C,F,H,I)),logen(memo,eval(G,I,D))))).
logen(ann_clause, ann_clause(14,eval(fun(A),_,B),logen(unfold,function(A,B)))).
logen(ann_clause, ann_clause(15,eval(print(A),_,constr(true,[])),(logen(rescall,print(A)),logen(rescall,nl)))).
logen(ann_clause, ann_clause(16,eval_if(A,B,_,C,D),(logen(unfold,test(A,C)),logen(rescall,!),logen(unfold,eval(B,C,D))))).
logen(ann_clause, ann_clause(17,eval_if(_,_,A,B,C),logen(unfold,eval(A,B,C)))).
logen(ann_clause, ann_clause(18,test(eq(A,B),C),(logen(unfold,eval(A,C,D)),logen(unfold,eval(B,C,D))))).
logen(ann_clause, ann_clause(19,rename(A,_,B),logen(call,B=A))).
logen(ann_clause, ann_clause(20,function(fib,lambda(x,if(eq(var(x),cst(0)),cst(1),if(eq(var(x),cst(1)),cst(1),plus(apply(minus(var(x),cst(1)),fun(fib)),apply(minus(var(x),cst(2)),fun(fib))))))),true)).
logen(ann_clause, ann_clause(21,store([],A,B,[A/B]),true)).
logen(ann_clause, ann_clause(22,store([A/_|B],A,C,[A/C|B]),true)).
logen(ann_clause, ann_clause(23,store([A/B|C],D,E,[A/B|F]),(logen(call,D\==A),logen(unfold,store(C,D,E,F))))).
logen(ann_clause, ann_clause(24,lookup(A,[A/B|_],B),true)).
logen(ann_clause, ann_clause(25,lookup(A,[B/_|C],D),(logen(rescall,A\==B),logen(unfold,lookup(A,C,D))))).
logen(ann_clause, ann_clause(26,fib(A,B),(logen(unfold,store([],x,A,C)),logen(unfold,eval(apply(cst(A),fun(fib)),C,constr(B,_)))))).
logen(ann_clause, ann_clause(27,bench(A,B),(logen(rescall,A>B),logen(rescall,print('Done')),logen(rescall,nl)))).
logen(ann_clause, ann_clause(28,bench(A,B),(logen(rescall,A=<B),logen(unfold,fib(A,C)),logen(rescall,!),logen(rescall,print(fib(A))),logen(rescall,print(' == ')),logen(rescall,print(C)),logen(rescall,nl),logen(rescall,D is A+1),logen(memo,bench(D,B))))).
logen(filter, filter(l_eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic])).
logen(filter, filter(eval(_,_,_),[static,(type list(struct(/,[static,dynamic]))),dynamic])).
logen(filter, filter(rename(_,_,_),[dynamic,dynamic,dynamic])).
logen(filter, filter(function(_,_),[dynamic,dynamic])).
logen(filter, filter(store(_,_,_,_),[dynamic,static,static,dynamic])).
logen(filter, filter(lookup(_,_,_),[struct(static,[]),dynamic,dynamic])).
logen(filter, filter(fib(_,_),[dynamic,dynamic])).
logen(filter, filter(bench(_,_),[dynamic,dynamic])).
logen(filter, filter(bench2(_,_),[dynamic,dynamic])).
logen(filter, filter(eval_if(_,_,_,_,_),[static,static,static,(type list(struct(/,[static,dynamic]))),dynamic])).
:- filter
        lix_load(static, nonvar, dynamic).
:- filter
        lix(nonvar, dynamic).
:- filter
        memo(nonvar, dynamic).
:- filter
        unfold(nonvar, dynamic).
:- filter
        generalise_and_filter(nonvar, dynamic, dynamic).
:- filter
        pretty_print_clauses(dynamic).
:- filter
        flatten(dynamic, dynamic).
:- filter
        gensym(static, dynamic).
:- filter
        oldvalue(dynamic, dynamic).
:- filter
        set_flag(nonvar, dynamic).
:- filter
        make_disj(dynamic, dynamic, dynamic).
:- filter
        simplify_eq(dynamic, dynamic, dynamic).
:- filter
        simplify_eqL(dynamic, dynamic, dynamic).
:- filter
        gen_filter(static, dynamic, dynamic, dynamic).
